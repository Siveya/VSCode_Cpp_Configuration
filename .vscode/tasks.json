{
	"version": "2.0.0",
	"tasks": [
		// CMake 任务可以用CMake Tools 插件代替
		// 1. 配置 CMake
		// Debug
		{
			"label": "CMake: 配置 Debug",
			"type": "shell",
			"command": "cmake",
			"args": [
				"-S",
				".",
				"-B",
				"${workspaceFolder}/build/Debug",
				"-DCMAKE_BUILD_TYPE=Debug" // 设置 Debug 编译类型
			],
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"problemMatcher": [],
			"detail": "CMake Debug 配置任务"
		},
		// Release
		{
			"label": "CMake: 配置 Release",
			"type": "shell",
			"command": "cmake",
			"args": [
				"-S",
				".",
				"-B",
				"${workspaceFolder}/build/Release",
				"-DCMAKE_BUILD_TYPE=Release" // 设置 Release 编译类型
			],
			"group": "build",
			"problemMatcher": [],
			"detail": "CMake Release 配置任务"
		},
		// 2. 编译 CMake
		{
			"label": "CMake: 编译 Debug",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				"build/Debug" // 构建目录
			],
			"group": "build",
			"problemMatcher": [],
			"detail": "CMake 编译 Debug 任务"
		},
		{
			"label": "CMake: 编译 Release",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				"build/Release" // 构建目录
			],
			"group": "build",
			"problemMatcher": [],
			"detail": "CMake 编译 Release 任务"
		},
		// 3. 清理构建目录
		{
			"label": "Clean Build",
			"type": "shell",
			"command": "rm",
			"args": [
				"-rf",
				"build/*" // 清理构建目录
			],
			"group": "build",
			"problemMatcher": [],
			"detail": "清理构建目录中的文件"
		}
	]
}